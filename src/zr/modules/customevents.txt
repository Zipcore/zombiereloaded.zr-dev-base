/**
 * Template instructions:
 * 
 * All module-specific text has been replaced with text enclosed in <>
 * This is to make preparing this file to become the module you need easier.
 * Simply search-and-replace (usually CTRL+H) each of the tags below and replace it with the module specifics.
 * 
 * Tags:
 * <FuncPrefix>         The prefix of your module's functions.  Usually the module's full name with no whitespaces.
 * <ModuleVarName>      Usually the same as <FuncPrefix>.  Names the global variable that stores this module's identifier.
 * 
 * Remove these instructions after all text replacement operations are completed.
 */

/**
 * Register all events here.
 */
public <FuncPrefix>_OnEventsRegister()
{
    // Register all the events needed for this module.
    //EventMgr_RegisterEvent(g_module<ModuleVarName>, "Event_OnMyCoreShutdown",         "<FuncPrefix>_OnMyCoreShutdown");
    //EventMgr_RegisterEvent(g_module<ModuleVarName>, "Event_OnMyCoreActivate",         "<FuncPrefix>_OnMyCoreActivate");
    //EventMgr_RegisterEvent(g_module<ModuleVarName>, "Event_OnGameRulesApplied",       "<FuncPrefix>_OnGameRulesApplied");
    
    #if defined PROJECT_GAME_CSS
    
    #endif
}

/**
 * Forwarded to the core module being shutdown before <FuncPrefix>_OnMyCoreActivate and <FuncPrefix>_OnGameRulesApplied.
 */
public <FuncPrefix>_OnMyCoreShutdown()
{
}

/**
 * Forwarded to the core module being activated after <FuncPrefix>_OnMyCoreShutdown but before <FuncPrefix>_OnGameRulesApplied.
 */
public <FuncPrefix>_OnMyCoreActivate()
{
}

/**
 * Called after a new rule set has been applied after <FuncPrefix>_OnMyCoreActivate.
 * 
 * @param oldgamerules  The name of the previous rule set.  Blank if first rule set.
 * @param newgamerules  The name of the new rule set.
 */
public <FuncPrefix>_OnGameRulesApplied(const String:oldruleset[], const String:newruleset[])
{
}
